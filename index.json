[{"categories":["helm"],"content":"Helm is a good tool to create common templates for your deployments. But when you start writing complex templates testing them manually is unpleasure. Could I use TDD (Test-Driven Development) for writing Helm Charts? Basic testing includes such manual operations as: Create test-service-values.yml with test values. Change that file for any case that you want to test. Run something like this helm template test-service spring-microservice --namespace esbs -f test-service-values.yml \u003e test-service.yml Manually check the generated file test-service.yml that it’s correct. After some investigation I found three approaches to write unit tests for Helm Charts: Helm unittest plugin; Write test on bash using bats (example https://github.com/hashicorp/vault-helm/tree/main/test/unit); HCUnit https://github.com/xchapter7x/hcunit I chose the first approach as the most simple and readable. You can read test suite and assertion rules on https://github.com/quintush/helm-unittest/blob/master/DOCUMENT.md# Consider that we have created a basic Helm Chart. We want to add Vault Agent Injector capabilities to the Chart. ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:0:0","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"Using Helm unittest plugin Start by installing helm-unittest plugin for Helm. helm plugin install https://github.com/quintush/helm-unittest For example our deployment.yaml from start was such: apiVersion: apps/v1 kind: Deployment # ... spec: # ... template: metadata: {{- with .Values.podAnnotations }} annotations: {{- toYaml . | nindent 8 }} {{- end }} # ... ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:0","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"First iteration First, create a directory called tests inside helm chart root folder. Then inside that folder create a file called vault_support_test.yaml. Test files must include suffix _test.yaml. Add tests directory into .helmignore file. suite: test Vault Agent integration templates: - deployment.yaml tests: - it: should not generate Vault annotations if vault.enabled = false set: vault.enabled: false asserts: - isNull: path: spec.template.metadata.annotations - it: should set annotations from podAnnotations set: vault.enabled: false podAnnotations: test/some-annotation: \"some-value\" asserts: - equal: path: spec.template.metadata.annotations value: test/some-annotation: \"some-value\" - isNull: path: spec.template.metadata.annotations.[vault.hashicorp.com/agent-inject] # Patterns to ignore when building packages. # This supports shell glob matching, relative path matching, and # negation (prefixed with !). Only one pattern per line. .DS_Store # ... tests To run tests: helm unittest --helm3 spring-microservice ### Chart [ spring-microservice ] spring-microservice PASS test Vault Agent integration spring-microservice/tests/vault_support_test.yaml Charts: 1 passed, 1 total Test Suites: 1 passed, 1 total Tests: 2 passed, 2 total Snapshot: 0 passed, 0 total Time: 59.915078ms You can get an error if you’re not using --helm3 flag: ### Error: apiVersion 'v2' is not valid. The value must be \"v1\" Charts: 1 failed, 1 errored, 0 passed, 1 total Test Suites: 0 passed, 0 total Tests: 0 passed, 0 total Snapshot: 0 passed, 0 total Time: 6.379641ms Now let’s add functionality to our Helm Chart step by step using TDD. First, add new test to the suite: - it: should set annotations from podAnnotations and generated Vault annotations set: vault.enabled: true podAnnotations: test/some-annotation: \"some-value\" asserts: - equal: path: spec.template.metadata.annotations.[test/some-annotation] value: \"some-value\" - isNotNull: path: spec.template.metadata.annotations.[vault.hashicorp.com/agent-inject] After running test we will get an error: FAIL test Vault Agent integration spring-microservice/tests/vault_support_test.yaml - should set annotations from podAnnotations and generated Vault annotations - asserts[1] `isNotNull` fail Template: spring-microservice/templates/deployment.yaml DocumentIndex: 0 Path: spec.template.metadata.annotations.[vault.hashicorp.com/agent-inject] Expected NOT to be null, got: null Charts: 1 failed, 0 passed, 1 total Test Suites: 1 failed, 0 passed, 1 total Tests: 1 failed, 2 passed, 3 total Then we write simple code improvement to implement our new requirement: {{- if or .Values.podAnnotations .Values.vault.enabled }} annotations: {{- if .Values.vault.enabled }} vault.hashicorp.com/agent-inject: true {{- end }} {{- toYaml .Values.podAnnotations | nindent 8 }} {{- end }} ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:1","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"Second iteration Now write a new test: - it: should generate Vault annotations by default asserts: - equal: path: spec.template.metadata.annotations value: vault.hashicorp.com/agent-inject: true vault.hashicorp.com/agent-image: \"registry-test.alfa-bank.kz/esbs/docker-base-images/vault:1.9.2-curl\" vault.hashicorp.com/preserve-secret-case: true vault.hashicorp.com/ca-cert: \"/vault/tls/ca.crt\" vault.hashicorp.com/tls-secret: \"vault-tls-client\" vault.hashicorp.com/role: \"k8s-test-default-role\" For that test we will add new values to values.yaml. That values used by default: vault: enabled: true image: \"registry-test.alfa-bank.kz/esbs/docker-base-images/vault:1.9.2-curl\" role: \"k8s-test-default-role\" debug: false Running test we will get an error: FAIL test Vault Agent integration spring-microservice/tests/vault_support_test.yaml - should generate Vault annotations by default Error: yaml: line 26: did not find expected key Charts: 1 failed, 0 passed, 1 total Test Suites: 1 failed, 0 passed, 1 total Tests: 1 failed, 1 errored, 3 passed, 4 total You can see that it’s not just failed (means that assertions are failed), but errored. That tells us to look at code on line 26. In my example, if .Values.podAnnotations is empty, then this error arises. Let’s fix it: {{- if or .Values.podAnnotations .Values.vault.enabled }} annotations: {{- if .Values.vault.enabled }} vault.hashicorp.com/agent-inject: true vault.hashicorp.com/agent-image: \"registry-test.alfa-bank.kz/esbs/docker-base-images/vault:1.9.2-curl\" vault.hashicorp.com/preserve-secret-case: true vault.hashicorp.com/ca-cert: \"/vault/tls/ca.crt\" vault.hashicorp.com/tls-secret: \"vault-tls-client\" vault.hashicorp.com/role: \"k8s-test-default-role\" {{- end }} {{- with .Values.podAnnotations }} {{- toYaml . | nindent 8 }} {{- end }} {{- end }} Refactoring Now we can see 4 passed test, without any failed or errored. We can refactor this code to simplify maintainability. Create templates/_vault.tpl file with the following content: {{/* Sets pod annotations with vault injector annotations */}} {{- define \"spring-boot-microservice.podAnnotations\" -}} {{- if or .Values.podAnnotations .Values.vault.enabled }} annotations: {{- if .Values.vault.enabled }} {{- include \"spring-boot-microservice.vaultAnnotations\" . | nindent 8 }} {{- end }} {{- with .Values.podAnnotations }} {{- toYaml . | nindent 8 }} {{- end }} {{- end }} {{- end }} {{/* Sets vault injector annotations */}} {{- define \"spring-boot-microservice.vaultAnnotations\" -}} vault.hashicorp.com/agent-inject: true vault.hashicorp.com/agent-image: \"registry-test.alfa-bank.kz/esbs/docker-base-images/vault:1.9.2-curl\" vault.hashicorp.com/preserve-secret-case: true vault.hashicorp.com/ca-cert: \"/vault/tls/ca.crt\" vault.hashicorp.com/tls-secret: \"vault-tls-client\" vault.hashicorp.com/role: {{ .Values.vault.role | quote }} {{- end }} And change templates/deployment.yaml to simple one: apiVersion: apps/v1 kind: Deployment # ... spec: # ... template: metadata: {{- template \"spring-boot-microservice.podAnnotations\" . }} # ... ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:2","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"Third iteration Next we need to generate such annotations with Go template as values. Add them to the last test: vault.hashicorp.com/agent-inject-secret-config.properties: \"k8s-prod/data/test/test-service\" vault.hashicorp.com/agent-inject-template-config.properties: | {{- with secret \"/k8s-prod/data/test/test-service\" -}} {{- range $k, $v := .Data.data -}} {{- if not ($k | regexMatch \"base64file\") -}} {{- $k }}={{ printf \"%s\\n\" $v -}} {{- end -}} {{- end -}} {{- end -}} Escaping Go Template in Helm Chart To escape Go template in the Helm Chart, we will use the solution from https://github.com/helm/helm/issues/2798 Insert inside templates/_vault.tpl: vault.hashicorp.com/agent-inject-secret-config.properties: \"k8s-prod/data/test/test-service\" vault.hashicorp.com/agent-inject-template-config.properties: | {{`{{- with secret \"/k8s-prod/data/test/test-service\" -}} {{- range $k, $v := .Data.data -}} {{- if not ($k | regexMatch \"base64file\") -}} {{- $k }}={{ printf \"%s\\n\" $v -}} {{- end -}} {{- end -}} {{- end -}}`}} ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:3","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"Forth iteration Rewrite .Release.Name for our last test, and set fullnameOverride value: - it: should generate Vault annotations by default release: namespace: test set: fullnameOverride: \"test-service\" asserts: #... Change templates/_vault.tpl like this: {{- define \"spring-boot-microservice.vaultAnnotations\" -}} #... vault.hashicorp.com/agent-inject-secret-config.properties: {{ include \"spring-boot-microservice.vaultSecretPath\" . }} vault.hashicorp.com/agent-inject-template-config.properties: | {{`{{- with secret \"/k8s-prod/data/test/test-service\" -}} {{- range $k, $v := .Data.data -}} {{- if not ($k | regexMatch \"base64file\") -}} {{- $k }}={{ printf \"%s\\n\" $v -}} {{- end -}} {{- end -}} {{- end -}}`}} {{- end }} {{/* Get Vault secret path */}} {{- define \"spring-boot-microservice.vaultSecretPath\" -}} {{- printf \"%s/data/%s/%s\" \"k8s-prod\" .Release.Namespace (include \"spring-microservice.fullname\" . ) }} {{- end }} ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:4","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"Fifth iteration Now we want to define Vault KV secret based on environment variable. If it set to prod, k8s-prod KV should be used. - it: should use Vault KV based on environment setting release: namespace: test-ns set: fullnameOverride: \"test-service\" environment: prod asserts: - equal: path: spec.template.metadata.annotations.[vault.hashicorp.com/agent-inject-secret-config.properties] value: \"k8s-prod/data/test-ns/test-service\" Add the following configuration settings into values.yaml: environment: prod vaultKV: test: \"k8s-test\" prod: \"k8s-prod\" Update templates/_vault.tpl in a such way: {{- define \"spring-boot-microservice.vaultSecretPath\" -}} {{- printf \"%s/data/%s/%s\" (include \"spring-boot-microservice.vaultKV\" . ) .Release.Namespace (include \"spring-microservice.fullname\" . ) }} {{- end }} {{/* Define Vault KV (key-value) engine based on selected environment (test|prod) */}} {{- define \"spring-boot-microservice.vaultKV\" -}} {{- if .Values.environment }} {{- default \"\" (printf \"%s\" (index .Values.vaultKV .Values.environment)) }} {{- end }} {{- end }} ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:5","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"Templates issues Suppose that we want to use predefined templates for Vault templating. And that templates will be not Strings, but another template that we evaluate using tpl function. For example, our values.yaml will be changed: vault: enabled: true files: config.properties: secretPath: '{{ include \"spring-boot-microservice.vaultSecretPath\" . }}' secretKey: \"\" useTemplate: \"kv\" templates: kv: | {{`{{- with secret`}} {{ .secretPath | quote }} {{`-}} {{- range $k, $v := .Data.data -}} {{- if not ($k | regexMatch \"base64file\") -}} {{- $k }}={{ printf \"%s\\n\" $v -}} {{- end -}} {{- end -}} {{- end -}}`}} file: | {{`{{- with secret` }} {{ .secretPath | quote }} {{ `-}} {{- base64Decode (index .Data.data `}}{{ .secretKey | quote }}{{`) }} {{- end -}}`}} As you can see, vault.templates.kv contains .secretPath variable, and vault.templates.file additionally evaluates .secretKey variable. The values of that variables should be gotten from vault.files.*.secretPath and vault.files.*.secretKey respectively. Let’s write a test: - it: should set Vault annotations to load a binary file release: namespace: test-ns set: fullnameOverride: \"test-service\" vault.files: GOST_cert.p12: secretPath: \"/k8s-prod/data/test-ns/test-service\" secretKey: \"service.eds.base64file\" useTemplate: \"file\" asserts: - equal: path: spec.template.metadata.annotations.[vault.hashicorp.com/agent-inject-secret-GOST_cert.p12] value: \"/k8s-prod/data/test-ns/test-service\" - equal: path: spec.template.metadata.annotations.[vault.hashicorp.com/agent-inject-template-GOST_cert.p12] value: | {{- with secret \"/k8s-prod/data/test-ns/test-service\" -}} {{- base64Decode (index .Data.data \"service.eds.base64file\") }} {{- end -}} - equal: path: spec.template.metadata.annotations.[vault.hashicorp.com/agent-inject-secret-config.properties] value: \"/k8s-prod/data/test-ns/test-service\" Trying to implement such logic, we can try this snippet: {{- range $fileName, $secretParams := .Values.vault.files }} {{ tpl (index $.Values.vault.templates (index $secretParams \"useTemplate\")) (dict \"secretPath\" (tpl $secretParams.secretPath $) \"secretKey\" $secretParams.secretKey ) | indent 2 }} {{- end }} We can send to the tpl function dictionary (map) of key-values, that will be used in the final template. But we will get errors: - should set Vault annotations to load a binary file Error: template: spring-microservice/templates/_vault.tpl:8:14: executing \"spring-boot-microservice.podAnnotations\" at \u003cinclude \"spring-boot-microservice.vaultAnnotations\" .\u003e: error calling include: template: spring-microservice/templates/_vault.tpl:34:3: executing \"spring-boot-microservice.vaultAnnotations\" at \u003ctpl (index $.Values.vault.templates (index $secretParams \"useTemplate\")) (dict \"secretPath\" (tpl $secretParams.secretPath $) \"secretKey\" $secretParams.secretKey)\u003e: error calling tpl: cannot retrieve Template.Basepath from values inside tpl function: {{`{{- with secret` }} {{ .secretPath | quote }} {{ `-}} {{- base64Decode (index .Data.data `}}{{ .secretKey | quote }}{{`) }} {{- end -}}`}} : \"BasePath\" is not a value The solution has been found on https://github.com/helm/helm/issues/5979#issuecomment-704740061. We need to send extra argument \"Template\" $.Template to tpl function. Fixed code looks like this: {{- range $fileName, $secretParams := .Values.vault.files }} {{- $useTemplate := index $secretParams \"useTemplate\" }} {{- $secretPath := (tpl $secretParams.secretPath $) }} vault.hashicorp.com/agent-inject-secret-{{ $fileName }}: {{ $secretPath }} vault.hashicorp.com/agent-inject-template-{{ $fileName }}: | {{ tpl (index $.Values.vault.templates $useTemplate) (dict \"secretPath\" $secretPath \"secretKey\" $secretParams.secretKey \"Template\" $.Template) | indent 2 }} {{- end }} ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:6","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["helm"],"content":"Using multiple templates in unit tests Previously in our test suite we have specified only one deployment.yaml in the list templates. That means only one template will be generated for tests. Consider a case when we want to generate ServiceAccount even if serviceAccount.create disabled but vault.enabled is true. If we specify new test like this: - it: should enable serviceAccount when vault is enabled set: fullnameOverride: \"test-service\" serviceAccount.create: false vault.enabled: true asserts: - containsDocument: kind: ServiceAccount apiVersion: v1 name: test-service template: serviceaccount.yaml It will fail with an error: - asserts[1] `containsDocument` fail Error: template \"spring-microservice/templates/serviceaccount.yaml\" not exists or not selected in test suite This error tells us that when you specify template value for specific assert or test, it must be included in the list of templates in a test suite. So to not overwrite previous tests, that used only deployment.yaml we will create separate test suite tests/serviceaccount_test.yaml. It contains all variations of configuration settings that we want: suite: test ServiceAccount templates: - deployment.yaml - serviceaccount.yaml tests: - it: should enable serviceAccount when vault is enabled set: fullnameOverride: \"test-service\" serviceAccount.create: false vault.enabled: true asserts: - equal: path: spec.template.spec.serviceAccountName value: \"test-service\" template: deployment.yaml - containsDocument: kind: ServiceAccount apiVersion: v1 name: test-service template: serviceaccount.yaml - it: should create serviceAccount when serviceAccount.create enabled set: fullnameOverride: \"another-service\" serviceAccount.create: true vault.enabled: false asserts: - equal: path: spec.template.spec.serviceAccountName value: \"another-service\" template: deployment.yaml - containsDocument: kind: ServiceAccount apiVersion: v1 name: another-service template: serviceaccount.yaml - it: should not create serviceAccount when serviceAccount.create disabled set: serviceAccount.create: false vault.enabled: false asserts: - equal: path: spec.template.spec.serviceAccountName value: \"default\" template: deployment.yaml - hasDocuments: count: 0 template: serviceaccount.yaml Another trick to implement such behaviour is setting value of serviceAccount.create to true if vault.enabled is true using set function: {{- if .Values.vault.enabled -}} {{- $_ := set .Values.serviceAccount \"create\" true }} {{- end -}} {{- if .Values.serviceAccount.create -}} apiVersion: v1 kind: ServiceAccount #... {{- end }} ","date":"Mar 03, 2022","objectID":"/2022/03/helm-unit-testing/:1:7","tags":["Helm","Unit Testing"],"title":"Unit Testing for Helm Charts","uri":"/2022/03/helm-unit-testing/"},{"categories":["java"],"content":"Recently I have passed the Oracle Certification Assosiate Java SE 8 Programmer I exam and scored 100%. In this short article I post resources that I used for preparation. ","date":"Jan 01, 2016","objectID":"/2016/01/preparation-oca-java8-exam/:0:0","tags":["Java","Exam"],"title":"Preparation for the OCA Java SE 8 Programmer I Exam","uri":"/2016/01/preparation-oca-java8-exam/"},{"categories":["java"],"content":"Resources I have used next list of books and Internet resources: OCA Java SE 8 Programmer I Study Guide, by Jeanne Boyarsky and Scott Selikoff (Wiley Publishing, 2015) OCA/OCP Java SE 7 Programmer I \u0026 II Study Guide (Exams 1Z0-803 \u0026 1Z0-804), by Kathy Sierra and Bert Bates (Oracle Press / McGraw-Hill Education, 2015) OCA Java SE 7 Programmer I Certification Guide, by Mala Gupta (Manning Publications, 2013) A Programmer’s Guide to Java SCJP Certification: a comprehensive primer, 3rd Edition, by Khalid A. Mughal, Rolf W. Rasmussen (Addison-Wesley, 2009) http://www.javaranch.com http://www.coderanch.com/forums/c/7/certification OCA/Java SE 8 Programmer I official exam page Also I have used Mock exams Enthuware JA+ V8 for Oracle Certified Associate - Java SE8 Programmer I You can view examples for preparation on GitHub repository https://github.com/XandrCherepanov/OCAJavaPrep ","date":"Jan 01, 2016","objectID":"/2016/01/preparation-oca-java8-exam/:1:0","tags":["Java","Exam"],"title":"Preparation for the OCA Java SE 8 Programmer I Exam","uri":"/2016/01/preparation-oca-java8-exam/"},{"categories":["java"],"content":"Preparation plan I have divided all topics to six big parts. I studied each topic by reading appropriate chapters in books, passing tests in those books, and answering objective-wise tests from the Enthuware mock exams. While learning it’s better to take notes about any subtle things and code examples for better understanding of the material. After completing all chapters I passed 7 full mock exams. I have scored approximately 95 percents in mock exams. N Title Literature source Objective-wise Tests Pages 1 Java Building Blocks Boyarsky (Chapter 1), Gupta (Chapter 1,2), Bates (Chapter 1,3), SCJP6 (Chapter 1, 2) Java Basics; Working with Java Data Types 330 2 Operators and Statements Boyarsky (Chapter 2), Gupta (Chapter 5), Bates (Chapter 4,6), SCJP6 (Chapter 5, 6) Using Operators and Decision Constructs; Using Loop Constructs 230 3 Methods and Encapsulation Boyarsky (Chapter 4), Gupta (Chapter 3), Bates (Chapter 2), SCJP6 (Chapter 3, 4) Working with Constructors, Methods, and Encapsulation; Lambda Expressions 320 4 Working with Inheritance Boyarsky (Chapter 5), Gupta (Chapter 6), Bates (Chapter 2), SCJP6 (Chapter 7,9) Working with Inheritance; Instanceof Operator 230 5 Core Java APIs Boyarsky (Chapter 3), Gupta (Chapter 4), Bates (Chapter 5), SCJP6 (Chapter 10) Creating and Using Arrays; Java API 220 6 Exception Handling Boyarsky (Chapter 6), Gupta (Chapter 7), Bates (Chapter 6), SCJP6 (Chapter 6) Handling Exceptions 170 ","date":"Jan 01, 2016","objectID":"/2016/01/preparation-oca-java8-exam/:2:0","tags":["Java","Exam"],"title":"Preparation for the OCA Java SE 8 Programmer I Exam","uri":"/2016/01/preparation-oca-java8-exam/"},{"categories":["java"],"content":"Result OCA Exam results OCA Certificate ","date":"Jan 01, 2016","objectID":"/2016/01/preparation-oca-java8-exam/:3:0","tags":["Java","Exam"],"title":"Preparation for the OCA Java SE 8 Programmer I Exam","uri":"/2016/01/preparation-oca-java8-exam/"},{"categories":["java"],"content":"In this video we will talk about: Installing Apache Tomcat on Mac OS X; Deploying and Undeploying Applications in Tomcat; Debugging Tomcat from IntelliJ IDEA. ","date":"May 05, 2015","objectID":"/2015/05/using-tomcat-for-web-development/:0:0","tags":["Java","IntelliJ IDEA","Tomcat","Video"],"title":"Using Tomcat for Web Development","uri":"/2015/05/using-tomcat-for-web-development/"},{"categories":["tools"],"content":"Basic shotcuts for comfortable work in IntelliJ IDEA Shortcut New Shortcut Command name ⇧⌘O ⌘P Navigate → File… ⌘F12 ⌘R Navigate → File Structure ⌘E View → Recent Files ⌘⌘ View → Tool Buttons ⌃⇥ Switcher ⇧⎋ Hide Active Tool Window ⇧⇧ Search Everywhere ⇧⌘A Find Action… ⌘↑ Navigate → Jump to Navigation Bar ⌘N New File… or Generate Code… ⌥⇧ Button1 Click Add or Remove Caret ⌃G ⌘D Add Selection for Next Occurrence ⌃V Split Vertically ⌃H Split Horizontally ⌘W Close Tab ⌘, Open Preferences… ⌘; Project Structure… ⌥⏎ Show Intention Actions ⇧⌘D Search in Dash (need Dash plugin) Keys ⇧ - Shift ⌃ - Control ⌥ - Option ⌘ - Command ⏎ - Return or Enter ⇥ - Tab ⎋ - Escape ","date":"May 05, 2015","objectID":"/2015/05/configure-intellij-idea/:1:0","tags":["IntelliJ IDEA","Tools","Video"],"title":"Basic Configuration and Usage of IntelliJ IDEA","uri":"/2015/05/configure-intellij-idea/"},{"categories":["tools"],"content":"Plugins Some plugins for IntelliJ IDEA that you may like: .ignore is a plugin for .gitignore (GIT), .hgignore (Mercurial), and many other files in your project. Markdown adds syntax highlighting and preview for markdown files (*.md). IdeaVim - Vim emulation plug-in for IDEs based on the IntelliJ platform. IdeaVim supports many Vim features including normal/insert/visual modes, motion keys, deletion/changing, marks and others. Dash - A smart and simple plugin that provides keyboard shortcut access for Dash, Velocity or Zeal in IntelliJ IDEA And enjoy watching! ","date":"May 05, 2015","objectID":"/2015/05/configure-intellij-idea/:2:0","tags":["IntelliJ IDEA","Tools","Video"],"title":"Basic Configuration and Usage of IntelliJ IDEA","uri":"/2015/05/configure-intellij-idea/"},{"categories":["ru","java","maven"],"content":"Apache Maven — фреймворк для автоматизации сборки проектов, специфицированных на XML-языке POM.1 В видео рассматривается установка Maven на Mac OS X с помощью пакетного менеджера Homebrew, создание простого проекта в IntelliJ IDEA и использование Maven в IntelliJ IDEA для компиляции проекта. Интересного просмотра! https://ru.wikipedia.org/wiki/Apache_Maven ↩︎ ","date":"May 05, 2015","objectID":"/2015/05/basic-usage-of-maven/:0:0","tags":["Java","Maven","IntelliJ IDEA","Video"],"title":"Основы использования Maven","uri":"/2015/05/basic-usage-of-maven/"},{"categories":null,"content":"Hi, I’m Alexandr. Welcome to my blog. Primarily I learn software development and use such programming languages as Java, C#, PHP. And I think there’s no ideal programming language. All of them have strong and weak sides. Another my interest is lying in administration sphere, especially administering Linux systems. I’m not a professional administrator, but in this blog I will publish solutions to problems I meet in practice. To solve some problem usually solution is combined from different resources, and after time you don’t remember what you did last time. So this blog mostly will contain short hints and step by step tutorials in using Linux, Mac OS X and, of course, Windows. My primary OS now is Mac OS X, which I use for almost all programming purposes. I mostly run Windows and Linux in virtual machine. But I also think every OS has power features and weaknesses. In particular applications each of this OSes is more powerful. Additionally I’ll put some posts about Android, since I use Android device. Also I’m just learning English and to improve it this blog will be in English. I’ll be glad if my notes help anyone. ","date":"Jan 01, 0001","objectID":"/about/:0:0","tags":null,"title":"About this blog","uri":"/about/"}]